export class STATCISQL {    public static selectScenicSQL: string = 'select scenicId,scenicName,scenicImg,x,y,scenicContext FROM scenic_mesg;'    public static getScenicClockSQL: string = 'select a.scenicId,b.clockInfoId FROM scenic_mesg as a  LEFT JOIN  clock_info as b on a.scenicId = b.scenicId LEFT JOIN  user_info as c ON b.userId = c.userId where c.userId=?'    public static insertIntoUserInfo: string = 'INSERT INTO user_info(userId,sessionId,userName,userImg) VALUES(?,?,?,?)'    public static selectUserInfoByOpenid: string = 'SELECT userId,sessionId,userName,userImg FROM user_info WHERE userId = ?';    public static updateUserInfoByOpenid: string = 'UPDATE user_info SET sessionId=?,userName=?,userImg=? WHERE userId = ?;';    public static insertIntoClockInfo: string = 'INSERT INTO clock_info(scenicId,userId,clockTime,clockImageList,clockText,userName,userImg) VALUES(?,?,?,?,?,?,?)';    public static selectClockWhereUserIdAndScenicId: string = 'SELECT scenicId,userId,clockTime,clockImageList,clockText,canvasImg from clock_info where userId=? AND scenicId=?';    public static selectClockListWhereScenicId: string = `SELECT SQL_CALC_FOUND_ROWS a.scenicId,a.userId,a.clockTime,a.clockImageList,a.clockText,a.clockInfoId,b.userName,b.userImg  from clock_info as a JOIN user_info AS b ON a.userId=b.userId WHERE scenicId = ?   ORDER by  clockTime DESC LIMIT ?,?;SELECT FOUND_ROWS() AS pageTotal;`    public static updateClcokCanvasImg: string = 'UPDATE clock_info SET canvasImg=?   WHERE clockInfoId=?'    public static selectClcokInfoByClockInfoId: string = 'SELECT clockInfoId,scenicId,userId,clockTime,clockImageList,clockText,userName,userImg,canvasImg FROM clock_info WHERE clockInfoId=?';    public static insertGiveLick: string = 'INSERT INTO giveLike_info(datetime,clockInfoId,userId) VALUES(?,?,?)';}export class CLOCKINFOSQL {    public static getGiveLikeListByClockId: string = 'select count(b.giveLikeId) as count,c.clockInfoId,c.scenicId,c.userId,c.clockTime,c.clockImageList,c.clockText,c.userName,c.userImg,c.canvasImg as c from givelike_info as b LEFT JOIN clock_info as c on b.clockInfoId=c.clockInfoId where c.scenicId = ? GROUP BY c.clockInfoId ORDER BY count  DESC LIMIT 20';}export class COMPANYSQL {    //创建新的企业sql    public static insertIntoCompany: string = 'INSERT INTO Company(companyID, companyName,companyLogo,companyAddress,companySize,companyIntroduction,companyType) VALUES(?,?,?,?,?,?,?)';    //修改企业信息    public static updateCompany: string = 'UPDATE Company SET companyName=?,companyLogo=?,companyAddress=?,companySize=?,companyIntroduction=?,companyType=? WHERE companyID = ?';    // 根据企业id返回实体    public static selectCompanyByCompanyID: string = 'SELECT * FROM Company WHERE companyID = ?';    // 根据企业名称返回实体    public static selectCompanyByCompanyName: string = 'SELECT * FROM Company WHERE companyName = ?';    // 根据企业名称模糊查询, 企业类型, 分页查询    public static selectCompanyByCompanyNameLike(isCompanyType: boolean, isCompanyName: boolean): string {        return `SELECT * FROM Company ${!isCompanyType || !isCompanyName ? 'WHERE' : ''}${!isCompanyName ? ' companyName LIKE ?' : ''} ${!isCompanyType && !isCompanyName ? 'AND' : ''} ${isCompanyType ? '' : 'companyType = ?'} LIMIT ?,?`    }    // 根据企业名称模糊查询, 企业类型, 分页查询    public static selectCompanyByCompanyNameCount(isCompanyType: boolean, isCompanyName: boolean): string {        return `SELECT COUNT(*) FROM Company ${!isCompanyType || !isCompanyName ? 'WHERE' : ''}${!isCompanyName ? ' companyName LIKE ?' : ''} ${!isCompanyType && !isCompanyName ? 'AND' : ''} ${isCompanyType ? '' : 'companyType = ?'}`    }    // 根据表名称返回该表的所有信息    public static selectCompanyByTableName: string = 'SELECT * FROM ??';    public static selectRegionEnum(): string {        return `SELECT * FROM RegionEnum where parent_id=?`;    }}export class POSITIONSQL {    // 创建一个新的岗位    public static insertIntoPosition: string = 'INSERT INTO Positions (positionID,positionName,positionDescription,recruitmentNumber,salaryRange,highlight,responsibilities,requirements,educationRequirement, companyID, positionType) VALUES (?,?,?,?,?,?,?,?,?,?,?)';    // 根据岗位id修改岗位信息    public static updatePosition: string = 'UPDATE Positions SET positionName=?,positionDescription=?,recruitmentNumber=?,salaryRange=?,highlight=?,responsibilities=?,requirements=?,educationRequirement=?,positionType=? WHERE positionID = ?';    // 根据岗位id删除岗位    public static deletePosition: string = 'UPDATE Positions SET positionType="2" WHERE positionID = ?';    // 查询companyID为指定值的所有的Position    public static selectPositionByCompanyID: string = 'SELECT * FROM Positions WHERE companyID = ?';    // 根据条件查询岗位,分页    public static selectPositionList(isPositionID: Boolean): string {        return `SELECT * FROM Positions ${isPositionID ? 'WHERE positionType IN (0, 1)' : 'WHERE positionType IN ("0", "1") AND companyID = ?'} LIMIT ?,?`    }    // 根据条件查询岗位总数    public static selectPositionCount(isPositionID: Boolean): string {        return `SELECT COUNT(*) FROM Positions ${isPositionID ? '' : 'WHERE positionType IN ("0", "1") AND companyID = ?'}`    }    // 根据岗位id返回岗位信息    public static selectPositionByPositionID: string = 'SELECT * FROM Positions WHERE positionID = ?';}export class RESUMESQL {    // 根据企业名称模糊查询, 企业类型, 分页查询    public static selectResumeLike(sql: string): string {        return`SELECT DISTINCT a.applicationID, a.applicationKey, a.companyID, a.positionID, a.resumeID, a.createDate FROM  Applications AS a INNER JOIN Positions AS p ON a.positionID = p.positionID ${sql} ORDER BY a.createDate DESC LIMIT ?,?`        // return `SELECT * FROM Applications ${sql} LIMIT ?,?`    }    // 根据企业名称模糊查询, 企业类型, 统计    public static selectResumeCount(sql: string): string {        return`SELECT DISTINCT COUNT(*) FROM  Applications AS a INNER JOIN Positions AS p ON a.positionID = p.positionID ${sql}`    }    // 创建简历个人信息    public static insertIntoResume: string = 'INSERT INTO Resume (name, avatar, gender, birthday, email, iDNumber, phoneNumber, weChat, ethnicity, politicalStatus, earliestStartDate, socialProfile, jobSeekerStatus, personalStatement,resumeID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';    // 修改简历个人信息    public static updateResume: string = 'UPDATE Resume SET name=?,avatar=?,gender=?,birthday=?,email=?,iDNumber=?,phoneNumber=?,weChat=?,ethnicity=?,politicalStatus=?,earliestStartDate=?,socialProfile=?,jobSeekerStatus=?,personalStatement=? WHERE resumeID=?';    // 根据简历id返回简历信息    public static selectResumeByResumeID: string = 'SELECT * FROM Resume WHERE resumeID = ?';    // 添加教育经历    public static insertIntoEducationHistory: string = 'INSERT INTO EducationHistory (schoolName, major, degree, startDate, resumeID, city, endDate, educationDescription, educationID) VALUES (?,?,?,?,?,?,?,?,?)';    // 根据教育id返回教育详情    public static selectEducationHistoryByEducationID: string = 'SELECT * FROM EducationHistory WHERE educationID = ?';    // 删除教育经历    public static deleteEducationHistory: string = 'DELETE FROM EducationHistory WHERE educationID = ?';    // 修改教育经历    public static updateEducationHistory: string = 'UPDATE EducationHistory SET  schoolName=?, major=?, degree=?, startDate=?, city=?, endDate=?, educationDescription=? WHERE educationID = ?';    // 根据简历ID返回工作经历数组    public static selectEducationHistoryByResumeID: string = 'SELECT * FROM EducationHistory WHERE resumeID = ?';    // 添加工作经历    public static insertIntoWorkExperience: string = 'INSERT INTO WorkExperience (jobType, companyName, positionTitle, startDate, resumeID, city, endDate, jobDescription, experienceID) VALUES (?,?,?,?,?,?,?,?,?)';    // 根据工作经历id返回工作经历详情    public static selectWorkExperienceByExperienceID: string = 'SELECT * FROM WorkExperience WHERE experienceID = ?';    // 删除工作经历    public static deleteWorkExperience: string = 'DELETE FROM WorkExperience WHERE experienceID = ?';    // 修改工作经历    public static updateWorkExperience: string = 'UPDATE WorkExperience SET jobType=?, companyName=?, positionTitle=?, startDate=?, city=?, endDate=?, jobDescription=? WHERE experienceID = ?';    // 根据简历ID返回工作经历数组    public static selectWorkExperienceByResumeID: string = 'SELECT * FROM WorkExperience WHERE resumeID = ?';    public static insertIntoApplication: string = 'INSERT INTO Applications (companyID,positionID,resumeID,applicationID,applicationKey) VALUES (?,?,?,?,?)';    public static selectApplicationByApplicationID: string = `SELECT COUNT(*) FROM Applications WHERE companyID=? AND positionID=? AND resumeID=?`    public static selectApplicationById: string = `SELECT * FROM Applications WHERE companyID=? AND positionID=? AND resumeID=?`}export class USERSQL {    // 在数据中插入用户信息    public static insertIntoUserInfo: string = 'INSERT INTO UserInfo (userName, password, name, userInfoID) VALUES (?,?,?,?)';    // 根据用户名称查询用户信息    public static selectUserInfoByUserName: string = 'SELECT * FROM UserInfo WHERE userName = ?';    // 根据用户id查询用户信息    public static selectUserInfoByUserID: string = 'SELECT * FROM UserInfo WHERE userInfoID = ?';    // 根据用户id绑定resumeID    public static updateUserInfoByUserInfoID: string = 'UPDATE UserInfo SET resumeID = ? WHERE userInfoID = ?';}